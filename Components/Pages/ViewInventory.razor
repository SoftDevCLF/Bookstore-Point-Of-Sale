@page "/viewInventory"
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.Services
@inject NavigationService navigationService

<!-- Breadcrumb navigation for page hierarchy -->
<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <!-- Link back to Home -->
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <!-- Link to Inventory Management page -->
        <li class="breadcrumb-item"><a href="/inventoryManagement">Inventory Management</a></li>
        <!-- Current page: View All Inventory -->
        <li class="breadcrumb-item active" aria-current="page">View All Inventory</li>
    </ol>
</nav>

<hr />

<!-- Main heading for the page -->
<h1>View All Inventory</h1>

<hr />

@if (!isLoaded) // If data is still loading
{
    // Show a loading message while waiting for the data
    <p class="text-muted">Loading inventory...</p>
}
else if (inventoryList.Count == 0) // If data loaded but the list is empty
{
    // Display a message when there is no inventory
    <p class="text-danger">No inventory found.</p>
}
else // If data is loaded and inventory is available
{
    // Display the inventory in a formatted table
    <table class="table table-striped">
        <!-- Table headers -->
        <thead class="table-dark">
            <tr>
                <th>ISBN</th>
                <th>Title</th>
                <th>Author</th>
                <th>Edition</th>
                <th>Editorial</th>
                <th>Genre</th>
                <th>Year</th>
                <th>Comments</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>

        <!-- Table body with dynamic rows -->
        <tbody>
            @foreach (Inventory item in inventoryList) // Loop through each inventory item
            {
                <tr>
                    <!-- Render book properties in table cells -->
                    <td>@item.ISBN</td>
                    <td>@item.Title</td>
                    <td>@item.Author</td>
                    <td>@item.Edition</td>
                    <td>@item.Editorial</td>
                    <td>@item.Genre</td>
                    <td>@item.Year</td>
                    <td>@item.Comments</td>
                    <td>@item.Price</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Button to navigate back to inventory management page -->
    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="navigationService.GoToInventoryManagementPage">
            Back to Inventory Management
        </button>
    </div>
}



@code {
	/// <summary>
	/// Holds the list of all inventory items fetched from the database.
	/// </summary>
	private List<Inventory> inventoryList = new List<Inventory>();

	/// <summary>
	/// Flag to indicate whether the inventory data has finished loading.
	/// </summary>
	private bool isLoaded = false;

	/// <summary>
	/// Lifecycle method called when the component is initialized.
	/// Loads all books from the database and sets the load flag.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		// Fetch all inventory items asynchronously using a background task.
		inventoryList = await Task.Run(() => InventoryDatabase.GetAllBooks());

		// Set the flag to indicate loading is complete.
		isLoaded = true;
	}

}
