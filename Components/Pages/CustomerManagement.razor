@page "/customerManagement"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel 
@using BookstorePointOfSale.Services
@inject NavigationService NavService 
@inject AlertService alertService
@inject ValidationService Validator

<!--Breadcrumbs, to navigate between pages-->
<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Customer Management</li>
    </ol>
</nav>

<!-- Header -->
<hr />
<h1>Customer Management</h1>
<hr/>
<p class="ms-2 text-muted">Welcome to the Customer Management Page</p>

<!-- Search and Add New Customer -->
<div class="container">
    <div class="row">
        <div class="col-8">
            <h4>Search for a customer</h4>
            <!-- Search Form -->
            <form @onsubmit="SearchCustomer">

                <div class="input-group mb-3 ">
                    <input class="border rounded-1 w-50 ps-3" placeholder="Phone Number (10 digits, no spaces)" @bind="phoneNumber" />
                    <button class="btn btn-primary" type="submit">Search</button>
                </div>

            </form>
        </div>
        <!--Add New Customer Button-->
        <div class="col-4">
            <h4>Add New Customer</h4>
            <button @onclick="NavService.GoToAddNewCustomerPage" type="button" class="btn btn-primary align-middle">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="align-middle bi bi-person-plus-fill me-2" viewBox="0 0 16 16">
                    <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6"/>
                    <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5"/>
                </svg> Add New Customer
            </button>

        </div>
    </div>
</div>

<hr>
<!-- Search Results -->
<div class="col-md-12 border-start border-end border-top align-middle">
    <p class="mt-3 ms-3">Search Results</p>
    <!-- Table to display search results-->
    <table class="table">
        <thead>
            <!--Headings-->
            <tr>
                <th class="text-primary border-secondary">Customer ID</th>
                <th class="text-primary border-secondary">Name</th>
                <th class="text-primary border-secondary">Email</th>
                <th class="text-primary border-secondary">Phone Number</th>
                <th class="text-primary border-secondary align-middle text-center"> Actions </th>
            </tr>
        </thead>
        <tbody>
            <!-- If the customer is found-->
            @if (foundCustomer != null)
            {
                    <!--Display the customer in a row-->
                    <tr class="align-middle">
                        <td >@foundCustomer.CustomerId</td>
                        <td >@foundCustomer.FirstName @foundCustomer.LastName</td>
                        <td >@foundCustomer.Email</td>
                        <td >@foundCustomer.PhoneNumber</td>
                        <td class="text-center">
                            <!-- Button to start a sale-->
                            <button class="btn btn-success" @onclick="() => NavService.GoToSalesPage(foundCustomer.CustomerId)">Start a Sale</button>
                            <!--Button to edit the customer-->
                            <button class="btn btn-primary" @onclick="() => NavService.GoToUpdateCustomerPage(foundCustomer.CustomerId)">Update</button>
                            <!--Button to delete the customer-->
                            <button class="btn btn-danger" @onclick="DeleteCustomer">Delete</button>
                        </td>
                    </tr>
            }
        </tbody>
    </table>

    <!--If the customer is not found-->
    @if (foundCustomer == null && searched)
    {
            <div class="m-3 text-black alert-danger text-center align-middle text-light">No results found.</div>
    }


</div>


@code {

    string phoneNumber; //Phone number
    bool validPhoneNumber; //If the phone number is valid
    Customer foundCustomer; //Customer
    bool searched = false; //If the customer has been searched

    /// <summary>
    /// Search for a customer manager
    /// </summary>
    public async Task SearchCustomer() //Async method to search for a customer, async to perform async tasks (such as await JSAlert) and Task to indicate that the method will complete their work asynchronously
    {
        searched = true; //Set searched to true
        if (await Validator.ValidatePhoneNumber(phoneNumber)) //Await the ValidatePhoneNumber method, if it returns true
        {
            foundCustomer = CustomerDatabase.Search(phoneNumber); //Search for the customer

            if (foundCustomer == null) //If the customer is not found
            {
                await alertService.JSAlert("Customer not found."); //Display an alert
            }
        }

        phoneNumber = "";//Reset the phone number

    }

    /// <summary>
    /// Deletes a customer from the database
    /// </summary>
    private async Task DeleteCustomer()
    {
        bool confirmed = await alertService.ConfirmAlert("Are you sure you want to delete this customer?"); //Check if the user wants to delete the customer

        if (!confirmed) //If the user does not want to delete the customer, return
        {
            return;
        }
        else //If the user wants to delete the customer, delete the customer, set foundCustomer to null, and searched to false
        {
            CustomerDatabase.DeleteCustomer(foundCustomer);
            foundCustomer = null;
            searched = false;
            alertService.JSAlert("Customer deleted!");//Display an alert
        }


    }

    // /// <summary>
    // /// Navigates to the add new customer page when clicking a button
    // /// </summary>
    // private void GoToAddNewCustomerPage() 
    // {
    //     Navigation.NavigateTo("/addNewCustomer"); //Navigation Manager. navigates to specified page

    // }

    // /// <summary>
    // /// Navigates to the update customer page and holds the customer id
    // /// </summary>
    // /// <param name="customerId"> Customer id</param>
    // private async void GoToUpdateCustomerPage(int customerId) 
    // {
    //     Navigation.NavigateTo($"/updatecustomer/{customerId}");
    // }

}
