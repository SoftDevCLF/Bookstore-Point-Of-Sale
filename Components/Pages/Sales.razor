@page "/sales"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
    </ol>
</nav>
<hr />
<h1>Sales</h1>
<hr />
<p class="ms-2 text-muted">Welcome to the Sales Homepage</p>

<h3>Make A Sale</h3>
<!--Find the Customer to sell to-->
<p>Fill out the information below for your sale</p>

<!--Customer ID Input-->
<div class="form-group">
    <label>Customer ID:</label>
    <input type="number" @bind="customerId" class="form-control" />
</div>

<!--ISBN Input-->
<div class="form-group">
    <label>ISBN:</label>
    <input type="text" @bind="isbn" class="form-control" />
</div>

<!-- Add to Cart Button -->
<button class="btn btn-success" @onclick="AddBookToCart">Add Book to Cart</button>

<!--Display Cart-->
<table class="table">
    <thead>
        <tr>
            <th>Customer ID</th>
            <th>Sale ID</th>
            <th>ISBN</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in cart)
        {
            <tr>
                <td>@customerId</td> <!-- Show Customer ID -->
                <td>@GetNextSaleId()</td> <!-- Show Sale ID -->
                <td>@entry.ISBN</td>
                <td>@entry.ItemPrice</td>
                <td>@entry.QuantitySold</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => RemoveBookFromCart(entry)">Remove from Cart</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!--Add More Books or Confirm Sale-->
<div class="mt-3">
    <p>Would you like to add more books to your cart?</p>

    <button class="btn btn-secondary" @onclick="AddBookToCart">Yes, add more books</button>
    <button class="btn btn-primary" @onclick="ConfirmSale">No, confirm sale</button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <p class="alert alert-info">@statusMessage</p>
}

@code {
    private int customerId;
    private string isbn;
    private string statusMessage;
    private List<SaleItem> cart = new(); //List to hold sale items in a cart

    private async Task AddBookToCart()
    {
        if (string.IsNullOrWhiteSpace(isbn))
        {
            await JSAlert("Please enter an ISBN.");
            return;
        }

        Console.WriteLine($"Attempting to fetch SaleItem for ISBN: {isbn}");
        var saleItem = SalesDatabase.GetSaleItemByISBN(isbn);

        if (saleItem != null)
        {
            Console.WriteLine($"SaleItem found: ISBN {saleItem.ISBN}, Quantity {saleItem.QuantitySold}, Price {saleItem.ItemPrice}");
            cart.Add(new SaleItem(saleItem.ISBN, saleItem.QuantitySold, saleItem.ItemPrice));
            statusMessage = $"Added book with ISBN {saleItem.ISBN} to the cart!";
        }
        else
        {
            Console.WriteLine("SaleItem retrieval failed, returning null.");
            await JSAlert("Book sale record not found. Please check the ISBN.");
        }

        Console.WriteLine($"Current cart count: {cart.Count}");
    }

	//Method to Remove Book from cart
    private async Task RemoveBookFromCart(SaleItem item)
    {
        cart.Remove(item);
        statusMessage = "Book removed from cart.";
    }

    //Method to confirm sale
    private async Task ConfirmSale()
    {
        if (cart.Count == 0)
        {
            await JSAlert("Cart is empty. Add books before confirming.");
        }
        else
        {
            statusMessage = "Sale confirmed!";
            cart.Clear();
        }
    }

    private int GetNextSaleId()
    {
		return GetNextSaleId() + 1; // Adjust this logic to fetch the last sale ID from your database
    }
  

    private async Task JSAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

}

    



