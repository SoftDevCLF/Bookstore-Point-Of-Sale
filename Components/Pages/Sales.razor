@page "/sales"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
    </ol>
</nav>
<hr />
<h1>Sales</h1>
<hr />
<p class="ms-2 text-muted">Welcome to the Sales Homepage</p>

<h3>Make A Sale</h3>
<!--Find the Customer to sell to-->
<p>Fill out the information below for your sale</p>

<!--Customer ID Input-->
<div class="form-group">
    <label>Customer ID:</label>
    <input type="number" @bind="customerId" class="form-control" />
</div>

<!--ISBN Input-->
<div class="form-group">
    <label>ISBN:</label>
    <input type="text" @bind="isbn" class="form-control" />
</div>

<!-- Add to Cart Button -->
<button class="btn btn-success" @onclick="AddBookToCart">Add Book to Cart</button>

<!--Display Cart-->
<table class="table">
    <thead>
        <tr>
            <th>Customer ID</th>
            <th>Sale ID</th>
            <th>ISBN</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Action</th>
        </tr>
    </thead>
</table>
@*     <tbody> *@
@*         @foreach (var entry in cart) *@
@*         { *@
@*             <tr> *@
@*                 <td>@customerId</td> <!-- Show Customer ID --> *@
@*                 <td>@nextSaleId</td> <!-- Show Sale ID --> *@
@*                 <td>@entry.ISBN</td> *@
@*                 <td>@entry.ItemPrice</td> *@
@*                 <td>@entry.QuantitySold</td> *@
@*                 <td> *@
@*                     <button class="btn btn-danger" @onclick="() => RemoveBookFromCart(entry)">Remove from Cart</button> *@
@*                 </td> *@
@*             </tr> *@
@*         } *@
@*     </tbody> *@
@* </table> *@

@* <!--Add More Books or Confirm Sale--> *@
@* <div class="mt-3"> *@
@*     <p>Would you like to add more books to your cart?</p> *@

@*     <button class="btn btn-secondary" @onclick="AddBookToCart">Yes, add more books</button> *@
@*     <button class="btn btn-primary" @onclick="ConfirmSale">No, confirm sale</button> *@
@* </div> *@

@* @if (!string.IsNullOrEmpty(statusMessage)) *@
@* { *@
@*     <p class="alert alert-info">@statusMessage</p> *@
@* } *@

@code {
    private int customerId;
    private string isbn;
    private string statusMessage;
    private int nextSaleId;
    private List<SaleItem> cart = new(); //List to hold cart items

    //Alert Method
    private async Task JSAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

    //Method to Create a New Sale Session
    private async Task CreateSaleSession()
    {
        if (customerId <= 0)
        {
            await JSAlert("Please enter a valid Customer ID.");
            return;
        }
        //Call CreateSaleSession to update status message
        statusMessage = SalesDatabase.CreateSaleSession(customerId);
        nextSaleId = SalesDatabase.GetNextSaleId();
        statusMessage = $"Sale ID {nextSaleId} has been created successfully.";
    }

    //Method to Add Book to Cart
    private async Task AddBookToCart()
    {
        if (string.IsNullOrEmpty(isbn))
        {
            await JSAlert("Please enter a valid ISBN.");
            return;
        }
        if (nextSaleId <= 0)
        {
            await JSAlert("Please create a sale session first before adding books.");
            return;
        }
        var saleItem = SalesDatabase.GetSaleItemByISBN(isbn);
		if (saleItem == null)
		{
			await JSAlert("Book not found in the database.");
			return;
		}

        if (saleItem != null)
        {
            //Check if the book is already in the cart
            var existingItem = cart.FirstOrDefault(item => item.ISBN == isbn);
            if (existingItem != null)
            {
                existingItem.QuantitySold += saleItem.QuantitySold;
                statusMessage = $"Updated quantity for {saleItem.ISBN} in the cart."; 
            }
            else
            {
                cart.Add(new SaleItem(saleItem.SaleItemId, saleItem.ISBN, saleItem.QuantitySold, saleItem.ItemPrice));
                statusMessage = $"Added {saleItem.ISBN} to the cart.";
            };
        }
}
}
    



