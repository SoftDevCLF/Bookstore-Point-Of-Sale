@page "/sales"
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.DataViewModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Sales</h3>

<!-- Breadcrumb Navigation -->
<div class="container mt-3">
    <nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
        <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
        </ol>
    </nav>
    <hr />
    <h1>Sales</h1>
    <hr />
    <p class="ms-2 text-muted">Search inventory and manage sales.</p>
</div>

<h3>Add Book to Sale</h3>
<div class="container mt-4">
    <!-- Input Form for ISBN and Quantity -->
    <div class="form-group mb-3">
        <label for="searchInput">Enter ISBN</label>
        <input type="text" id="searchInput" class="form-control" @bind="searchInput" placeholder="Enter Book ISBN" />
    </div>

    <div class="form-group mb-3">
        <label for="quantityInput">Quantity</label>
        <input type="number" id="quantityInput" class="form-control" @bind="quantityInput" placeholder="Enter Quantity" min="1" />
    </div>

    <button class="btn btn-primary" @onclick="AddtoSale">Add to Sale</button>
</div>

<!-- Display the Sale Items -->
<h4>Items in Sale</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>ISBN</th>
            <th>Title</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in saleItems)
        {
            var book = InventoryDatabase.SearchByISBN(item.ISBN); // Get book details by ISBN
            <tr>
                <td>@item.ISBN</td>
                <td>@book?.Title</td>
                <td>@item.QuantitySold</td>
                <td>@book?.Price</td>
                <td>@(item.QuantitySold * (book?.Price ?? 0))</td>
            </tr>
        }
    </tbody>
</table>

<h4>Total: @totalAmount</h4>


<!--Confirm and Cancel-->



@code {
    private List<SaleItem> saleItems = new List<SaleItem>();
    private string searchInput;
    private int saleId;
    private int quantityInput = 1; // Default quantity
    private double totalAmount = 0;

	private string searchBy = "isbn"; // Default search by ISBN
	List<Inventory> foundBooks= new List<Inventory>();
    Inventory foundBook = null;

    // Add books to the Sale
    private async Task AddtoSale()
    {
        foundBook = null;

        try
        {
            // Validate inputs
            if (string.IsNullOrWhiteSpace(searchInput) || quantityInput <= 0)
            {
                await JS.InvokeVoidAsync("alert", "Please enter a valid ISBN and quantity.");
                return;
            }

            // Search by ISBN
            foundBook = InventoryDatabase.SearchByISBN(searchInput); // Search by ISBN

            // Handle the case where no book is found
            if (foundBook == null)
            {
                await JS.InvokeVoidAsync("alert", "Book not found in inventory.");
                return;
            }

            // Check stock availability
            if (foundBook.Quantity < quantityInput)
            {
                await JS.InvokeVoidAsync("alert", "Not enough stock available.");
                return;
            }

            // Add the SaleItem to the sale
            var saleItem = new SaleItem(saleId, foundBook.ISBN, quantityInput);
            saleItems.Add(saleItem);
            totalAmount += foundBook.Price * quantityInput;

            // Update inventory
            foundBook.Quantity -= quantityInput;

            await JS.InvokeVoidAsync("alert", "Book found and added to the sale.");

            // Clear input fields
            searchInput = "";
            quantityInput = 1;
        }
        catch (Exception ex)
        {
            // Catch any unexpected errors and show them
            await JS.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    // JS Async Alert Method
    private async Task JSAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}
}
    

    

   


	
        


  
