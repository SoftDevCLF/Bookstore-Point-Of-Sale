@page "/sales"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<!--BreadCrumb Navigation-->
<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
    </ol>
</nav>
<hr />
<h1>Sales</h1>
<hr />
<p class="ms-2 text-muted">Welcome to the Sales Homepage</p>

<h3>Make A Sale</h3>
<!--Find the Customer to sell to-->
<p>Fill out the information below for your sale</p>

<!--Customer ID Input-->
<div class="form-group">
    <label>Customer ID:</label>
    <input type="number" @bind="customerId" class="form-control" />
</div>

<!--Sale Session Buttin-->
<button class="btn btn-primary" @onclick="CreateSaleSession">Click here to start a sale session</button>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <p class="alert alert-info">@statusMessage</p>
}
<!--ISBN Input-->
<div class="form-group">
    <label>ISBN:</label>
    <input type="text" @bind="isbn" class="form-control" />
</div>

<!-- Quantity Input -->
<div class="form-group">
    <label>Quantity:</label>
    <input type="number" @bind="quantity" class="form-control" />
</div>

<!-- Add Book to Sale Button -->
<button class="btn btn-success" @onclick="AddBookToSale">Add Book to Sale</button>

<!-- Display Sale Items -->
@if (saleItems != null && saleItems.Count > 0)
{
    <h3>Sale Items</h3>
    <table class="table">
        <thead>
            <tr>
                <th>ISBN</th>
                <th>Title</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in saleItems)
            {
                <tr>
                    <td>@item.ISBN</td>
                    <td>@item.Title</td>
                    <td>@item.QuantitySold</td>
                    <td>@item.ItemPrice</td>
                    <td>@(item.QuantitySold * item.ItemPrice)</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Confirm Sale Button -->
@if (saleItems != null && saleItems.Count > 0)
{
    <button class="btn btn-warning" @onclick="ConfirmSale">Confirm Sale</button>
}



@code {
    private int customerId;
    private string isbn;
    private int quantity;
    private string statusMessage;
    private int saleId; // Current Sale ID
	private string receipt; // Receipt details
    private List<SaleItem> saleItems = new(); // Holds Sale Items

    //Alert Method
    private async Task JSAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

    //Start the sale session
    private async Task StartSaleSession()
    {
        if (customerId <= 0)
        {
            await JSAlert("Please enter a valid Customer ID.");
            return;
        }

        saleId = SalesDatabase.CreateSaleSession(customerId); // Create a new sale session
        statusMessage = $"Sale session started! Sale ID: {saleId}";
        await JSAlert(statusMessage);
    }

    //Add book to sale
    // private async Task AddBookToSale()
    // {
    //     if (saleId <= 0)
    //     {
    //         await JSAlert("Please start a sale session first.");
    //         return;
    //     }

    //     if (string.IsNullOrEmpty(isbn) || quantity <= 0)
    //     {
    //         await JSAlert("Please enter a valid ISBN and quantity.");
    //         return;
    //     }

    //     string result = SalesDatabase.AddBookToCart(saleId, isbn, quantity, GetItemPrice(isbn)); Replace GetItemPrice with your method to fetch price
    //     if (!result.StartsWith("Error"))
    //     {
    //         saleItems = SalesDatabase.GetSaleItemsBySaleId(saleId); Refresh sale items
    //         statusMessage = "Book added to sale successfully!";
    //     }
    //     else
    //     {
    //         statusMessage = result;
    //     }
    //     await JSAlert(statusMessage);
    // }
    //Confirm Sale
    private async Task ConfirmSale()
    {
        if (saleId <= 0)
        {
            await JSAlert("No active sale session to confirm.");
            return;
        }

        string result = SalesDatabase.ConfirmSale(saleId);
        if (!result.StartsWith("Error"))
        {
            statusMessage = "Sale confirmed successfully!";
            saleItems.Clear(); // Clear sale items
            saleId = 0; // Reset sale session

            // Generate the receipt
            receipt = SalesDatabase.GenerateReceipt(saleId); // Fetch receipt de

        }
        else
        {
            statusMessage = result;
        }
        await JSAlert(statusMessage);
    }

}
    



