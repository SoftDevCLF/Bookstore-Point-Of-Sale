﻿<h3>Sales</h3>

<!-- Breadcrumb Navigation -->
<div class="container mt-3">
    <nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
        <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
        </ol>
    </nav>
    <hr />
    <h1>Sales</h1>
    <hr />
    <p class="ms-2 text-muted">Welcome to the Sales Homepage</p>

    <h3>Start a New Sale Session</h3>
    <!-- Customer ID Input -->
    <div class="mb-3">
        <label class="form-label">Customer ID:</label>
        <input type="number" @bind="customerId" class="form-control" />
    </div>
    <button class="btn btn-primary mb-3" @onclick="CreateSaleSession">Start Sale Session</button>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <p class="alert alert-info">@statusMessage</p>
    }

	@if (saleId > 0)
	{
        <div class="alert alert-info">
            Active Sale ID: @saleId | Customer: @customerId
        </div>
	}

    <h3>Add Items to Sale</h3>
    <!-- ISBN Input -->
    <div class="mb-3">
        <label class="form-label">ISBN:</label>
        <input type="text" @bind="isbn" class="form-control" />
    </div>
    <!-- Quantity Input -->
    <div class="mb-3">
        <label class="form-label">Quantity:</label>
        <input type="number" @bind="quantitySold" class="form-control" />
    </div>
    <button class="btn btn-success mb-3" @onclick="AddSaleItem">Add Item to Sale</button>

    @if (saleItems != null && saleItems.Count > 0)
    {
        <h3>Current Sale Items</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>ISBN</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in saleItems)
                {
                    <tr>
                        <td>@item.ISBN</td>
                        <td>@item.QuantitySold</td>
                        <td>@item.ItemPrice.ToString("C")</td>
                        <td>@((item.QuantitySold * item.ItemPrice).ToString("C"))</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr class="table-active">
                    <td colspan="4" class="text-end fw-bold">Grand Total:</td>
                    <td class="fw-bold">@saleItems.Sum(i => i.QuantitySold * i.ItemPrice).ToString("C")</td>
                </tr>
            </tfoot>
        </table>

        <div class="d-flex gap-2 mb-3">
            <button class="btn btn-warning" @onclick="ConfirmSale">Confirm Sale</button>
            <button class="btn btn-danger" @onclick="CancelSale">Cancel Sale</button>
        </div>
    }
    <h3>Receipt</h3>
    <button class="btn btn-primary mb-2" @onclick="GenerateReceipt">Generate Receipt</button>

    @if (!string.IsNullOrWhiteSpace(receipt))
    {
        <div class="border rounded bg-white p-3 mt-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5>Receipt Preview</h5>
                <button class="btn btn-sm btn-outline-secondary" @onclick="GenerateReceipt">
                    <i class="bi bi-printer"></i> Print
                </button>
            </div>
            <div class="receipt-content font-monospace bg-light p-3">
                <pre>@receipt</pre>
            </div>
        </div>
    }
    else
    {
        <p class="text-muted">No receipt generated yet.</p>
    }
</div>


@code {
    private int customerId;
    private string isbn;
    private int quantitySold;
    private decimal itemPrice;
    private string statusMessage;
    private string receipt;
    private int saleId; // Current Sale ID
    private List<SaleItem> saleItems = new(); // Holds Sale Items

    //Begin the sale process
    private async Task CreateSaleSession()
    {
        if (customerId <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid customer ID.");
            return;
        }
        saleId = SalesDatabase.CreateSaleSession(customerId);
        statusMessage = saleId > 0 ? "Sale session created successfully." : "Failed to create sale session.";
    }


    //Add Book to Sale
    private async Task AddSaleItem()
    {
        if (saleId <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please create a sale session first.");
            return;
        }
        if (string.IsNullOrEmpty(isbn))
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid ISBN.");
            return;
        }

        if (quantitySold <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter a quantity greater than 0.");
            return;
        }
        var book = SalesDatabase.GetSaleItemByIsbn(isbn);
        if (book == null)
        {
            await JS.InvokeVoidAsync("alert", "Book not found.");
            return;
        }

        itemPrice = book.ItemPrice;

        bool result = SalesDatabase.AddSaleItem(saleId, isbn, quantitySold, itemPrice);
        if (result)
        {
            //Check if the item is already in the in-memory salesitems list
            SaleItem existingItem = null;

            //Loop through each saleitem to find a match by ISBN
            foreach (SaleItem item in saleItems)
            {
                if (item.ISBN == isbn)
                {
                    existingItem = item; //Found an existing match
                    break; //No need to keep checking the rest
                }
            }
            if (existingItem != null)
            {
                //If the item was already added before, increase the quantity
                existingItem.QuantitySold += quantitySold;
            }
            else
            {
                //If its a brand new sale item in the sale, add it to the list
                saleItems.Add(new SaleItem(isbn, quantitySold, itemPrice));
            }

            statusMessage = "Book added to sale successfully.";
        }

        else
        {
            statusMessage = "Failed to add book to sale.";
        }
    }

    //Confirm the sale
    private async Task ConfirmSale()
    {
        if (saleId <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please create a sale session first.");
            return;
        }
        if (saleItems.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "No items in the sale.");
            return;
        }
        var result = SalesDatabase.ConfirmSale(saleId);
        if (result)
        {
            receipt = SalesDatabase.GenerateReceipt(saleId);
            statusMessage = "Sale confirmed successfully.";
            saleId = 0; // Reset sale ID after confirmation
            saleItems.Clear(); // Clear sale items after confirmation
        }
        else
        {
            statusMessage = "Failed to confirm sale.";
        }
    }
    //Cancel the sale
    private async Task CancelSale()
    {
        if (saleId <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please create a sale session first.");
            return;
        }
        var result = SalesDatabase.CancelSale(saleId);
        if (result)
        {
            statusMessage = "Sale cancelled successfully!";
            saleId = 0; // Reset sale ID after cancellation
            saleItems.Clear(); // Clear sale items after cancellation
        }
        else
        {
            statusMessage = "Failed to cancel sale.";
        }
    }

    //Generate a Receipt
    private async Task GenerateReceipt()
    {
        receipt = SalesDatabase.GenerateReceipt(saleId);
		await JS.InvokeVoidAsync("alert", "Receipt generated successfully.");
		StateHasChanged(); // Refresh the UI to show the receipt
    }
}



