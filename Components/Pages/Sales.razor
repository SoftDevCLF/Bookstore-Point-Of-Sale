@page "/sales"
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.DataViewModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Sales</h3>

<!-- Breadcrumb Navigation -->
<div class="container mt-3">
    <nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
        <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Sales</li>
        </ol>
    </nav>
    <hr />
    <h1>Sales</h1>
    <hr />
    <p class="ms-2 text-muted">Search inventory and manage sales.</p>
</div>

<h3>Add Book to Sale</h3>
<div class="container mt-4">
    <!-- Input Form for ISBN and Quantity -->
    <div class="form-group mb-3">
        <label for="isbnInput">ISBN</label>
        <input type="text" id="isbnInput" class="form-control" @bind="isbnInput" placeholder="Enter Book ISBN" />
    </div>

    <div class="form-group mb-3">
        <label for="quantityInput">Quantity</label>
        <input type="number" id="quantityInput" class="form-control" @bind="quantityInput" placeholder="Enter Quantity" min="1" />
    </div>

    <!-- Add Button -->
    <button class="btn btn-primary" @onclick="AddtoSale">Add to Sale</button>
</div>


<!--Form to Search Inventory and Add Sale-->

}

@code {
    private List<SaleItem> saleItems = new List<SaleItem>();
    private string searchTitle = "";
    private string isbnInput = "";
    private int quantityInput = 1; // Default quantity
    private double totalAmount = 0;

    string searchBy = "isbn";
    string searchInput;
    Inventory foundBook = null;
    List<Inventory> foundBooks = new();
    bool searched = false;


    // Load inventory
    protected override async Task OnInitializedAsync()
    {
        // Example: Get all books from the database
        foundBooks = await Task.Run(() => InventoryDatabase.GetAllBooks()); // Assuming you have a method like this
    }

    //Add books to the Sale
    private async Task AddtoSale()
    {
        foundBook = null;
        foundBooks.Clear();
        searched = false;

        // Validate inputs
        if (string.IsNullOrWhiteSpace(searchInput) || quantityInput <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid ISBN and quantity.");
            return;
        }
        if (searchBy == "isbn")
        {
            // Check if the book exists in the inventory
            foundBook = InventoryDatabase.SearchByISBN(isbnInput);
        }
        else if (searchBy == "title")
        {
            // Check if the book exists in the inventory
            foundBooks = InventoryDatabase.SearchByTitle(searchInput);
        }

        searched = true;
		searchInput = ""; // Clear the search input after searching

        //If book is found add item to sale
		if (foundBook != null)
		{
			// Book is found in the inventory
			var book = foundBooks.FirstOrDefault(b => b.ISBN == isbnInput);

            //Add the sale item to the list since book is found
			var saleItem = new SaleItem(0, book.ISBN, quantityInput); // SaleId is generated in the DB

			// Add the sale item to the list
			SalesDatabase.AddSaleItem(saleItem);

			// Update inventory after sale
			book.Quantity -= quantityInput; // Decrease stock in inventory
			totalAmount += book.Price * quantityInput; // Update total sale amount
			saleItems.Add(saleItem); // Add the sale item to the list

            // Clear input fields after adding the item to the sale
            isbnInput = "";
            quantityInput = 1;

		}
    }

}

    

   


	
        


  
