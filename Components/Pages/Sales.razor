@page "/sales/{customerId:int}"
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.DataViewModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Sales</h3>

<!-- Breadcrumb Navigation -->
<div class="container mt-3">
    <nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
        <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Sale Reports</li>
        </ol>
    </nav>
    <hr />
    <h1>Sales</h1>
    <hr />
    <p class="ms-2 text-muted">Search inventory and manage sales.</p>
</div>
@if (!isLoaded)
{
    <p>Customer not found</p>
}
else
{
    <h4>Customer ID: @Customer.CustomerId</h4>
    <h4>Customer Name: @Customer.FirstName @Customer.LastName</h4>
}

<h3>Add Book to Sale</h3>
<div class="container mt-4">
    <!-- Input Form for ISBN and Quantity -->
    <div class="form-group mb-3">
        <label for="searchInput">Enter ISBN</label>
        <input type="text" id="searchInput" class="form-control" @bind="searchInput" placeholder="Enter Book ISBN" />
    </div>

    <div class="form-group mb-3">
        <label for="quantityInput">Quantity</label>
        <input type="number" id="quantityInput" class="form-control" @bind="quantityInput" placeholder="Enter Quantity" min="1" />
    </div>

    <button class="btn btn-primary" @onclick="AddtoSale">Add to Sale</button>
</div>

<!-- Display the Sale Items -->
<h4>Items in Sale</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>ISBN</th>
            <th>Title</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in saleItems)
        {
            var book = allBooks.FirstOrDefault(b => b.ISBN == item.ISBN);
            <tr>
                <td>@item.ISBN</td>
                <td>@book?.Title</td>
                <td>@item.QuantitySold</td> <!-- Or @item.Quantity if that's the correct property -->
                <td>@book?.Price</td>
                <td>@(item.QuantitySold * (book?.Price ?? 0))</td>
            </tr>
        }

    </tbody>
</table>
<h4>Total: @totalAmount</h4>
<!-- Confirm and Cancel Buttons -->
<div class="container mt-4">
    <button class="btn btn-success" @onclick="ConfirmSaleItemandAddToSale">Confirm Sale</button>
    <button class="btn btn-danger" @onclick="CancelSale">Cancel Sale</button>
</div>


<!--Confirm and Cancel-->



@code {
    private List<SaleItem> saleItems = new List<SaleItem>();
    private string searchInput;
    private int saleId;
    private double totalSale;
    private int quantityInput = 1; // Default quantity
    private double totalAmount = 0;

    private string searchBy = "isbn"; // Default search by ISBN
    List<Inventory> foundBooks= new List<Inventory>();
    Inventory foundBook = null;

    [Parameter] 
    public int customerId { get; set; } //Bind the customerId from route to the property

    private Customer Customer = new();
	private bool isLoaded = false;

    //Retrieve customer from DB
	protected override async Task OnParametersSetAsync()
	{
        Customer = CustomerDatabase.GetCustomerById(customerId);
		if (Customer == null) //Check if the customer was found
		{
			await JS.InvokeVoidAsync("alert", "Customer not found.");
			Navigation.NavigateTo("/customerManagement");
		}
		else
		{
			isLoaded = true; // Set isLoaded to true if customer is found
		}
	}


    private List<Inventory> allBooks = new List<Inventory>();

    protected override void OnInitialized()
    {
        allBooks = InventoryDatabase.GetAllBooks();
    }

    // Add books to the Sale
    private async Task AddtoSale()
    {
        foundBook = null;

        try
        {
            // Validate inputs
            if (string.IsNullOrWhiteSpace(searchInput) || quantityInput <= 0)
            {
                await JS.InvokeVoidAsync("alert", "Please enter a valid ISBN and quantity.");
                return;
            }

            // Search by ISBN
            foundBook = InventoryDatabase.SearchByISBN(searchInput); // Search by ISBN

            // Handle the case where no book is found
            if (foundBook == null)
            {
                await JS.InvokeVoidAsync("alert", "Book not found in inventory.");
                return;
            }

            // Check stock availability
            if (foundBook.Quantity < quantityInput)
            {
                await JS.InvokeVoidAsync("alert", "Not enough stock available.");
                return;
            }

            // Add the SaleItem to the sale
            var saleItem = new SaleItem(saleId, foundBook.ISBN, quantityInput);
            saleItems.Add(saleItem);
            totalAmount += foundBook.Price * quantityInput;

            //state has changed
            StateHasChanged();

            // Update inventory
            foundBook.Quantity -= quantityInput;

            await JS.InvokeVoidAsync("alert", "Book found and added to the sale.");

            // Clear input fields
            searchInput = "";
            quantityInput = 1;
        }
        catch (Exception ex)
        {
            // Catch any unexpected errors and show them
            await JS.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    // Confirm Sale
    private async Task ConfirmSaleItemandAddToSale()
    {
        try
        {
            if (saleItems.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "No items in the sale to confirm.");
                return;
            }

            foreach (var item in saleItems)
            {
                // Get the book for price and inventory update
                var book = InventoryDatabase.SearchByISBN(item.ISBN);
                if (book == null)
                {
                    await JS.InvokeVoidAsync("alert", $"Book with ISBN {item.ISBN} not found in inventory.");
                    return;
                }

                // Save to SalesDatabase
                var result = SalesDatabase.AddSaleItem(item, customerId, totalSale);
                if (result == null)
                {
                    await JS.InvokeVoidAsync("alert", $"Failed to save sale item for ISBN {item.ISBN}.");
                    return;
                }

                // Update inventory and total
                book.Quantity -= item.QuantitySold;
                totalAmount += book.Price * item.QuantitySold;
            }

            await JS.InvokeVoidAsync("alert", "Sale confirmed!");

            // Clear all local states after sale
            saleItems.Clear();
            totalAmount = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Unhandled error: {ex.Message}");
        }
    }





	// Cancel Sale
	private async Task CancelSale()
	{
		// Logic to cancel the sale
		if (saleItems.Count == 0)
		{
			await JSAlert("No items in the sale to cancel.");
			return;
		}
		// Reset the sale items and total amount
		saleItems.Clear();
		totalAmount = 0;

		// Update inventory for each item in the sale
		foreach (var item in saleItems)
		{
			var book = InventoryDatabase.SearchByISBN(item.ISBN);
			if (book != null)
			{
				book.Quantity += item.QuantitySold; // Assuming QuantitySold is the quantity sold
			}
		}

		await JS.InvokeVoidAsync("alert", "Sale cancelled!");

		//state has changed

		StateHasChanged();
	}
    // JS Async Alert Method
    private async Task JSAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}
 

    

   


	
        


  
