@page "/sales/{customerId:int}"
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.DataViewModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Sales</h3>

<!-- Breadcrumb Navigation -->
<div class="container mt-3">
    <nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
        <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Sales</li>
        </ol>
    </nav>
    <hr />
    <h1>Sales</h1>
    <hr />
    <p class="ms-2 text-muted">Search inventory and manage sales.</p>
</div>

<h3>Add Book to Sale</h3>
<div class="mb-3">
    <label>ISBN:</label>
    <input type="text" class="form-control" @bind="isbnInput" />
</div>

<div class="mb-3">
    <label>Quantity:</label>
    <input type="number" class="form-control" @bind="quantityInput" />
</div>

<button class="btn btn-primary" @onclick="AddItemToSale">Add to Sale</button>

<hr />

@if (saleItems.Count > 0)
{
    <h4 class="mt-4">Sale Summary</h4>
    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>ISBN</th>
                <th>Title</th>
                <th>Unit Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in saleItems)
            {
                var book = inventoryList.FirstOrDefault(b => b.ISBN == item.ISBN);

                if (book != null)
                {
                    <tr>
                        <td>@book.ISBN</td>
                        <td>@book.Title</td>
                        <td>@book.Price.ToString("C")</td>
                        <td>@(book.Price * item.QuantitySold).ToString("C")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}



@code {
    //Parameter to hold the customer ID
    [Parameter]
    public int customerId { get; set; }

    private List<Inventory> inventoryList = new List<Inventory>();
    private List<SaleItem> saleItems = new List<SaleItem>();

    private int selectedCustomerId;
    private bool isLoaded = false;

    private string isbnInput;
    private int quantityInput;
    private int saleId = 1; //Initialized sale ID

    //Fetching Inventory
    protected override async Task OnInitializedAsync()
    {
        inventoryList = await Task.Run(() => InventoryDatabase.GetAllBooks());
        isLoaded = true;
    }

    //Add Item to Sale
    private async Task AddItemToSale()
    {
        //Try to find the book in inventory

        Inventory foundBook = InventoryDatabase.SearchByISBN(isbnInput);

        //Check if the book is found
        if (foundBook == null)
        {
            await JS.InvokeVoidAsync("alert", "Book not found.");
            return;
        }
        //Check if the quantity is valid
        if (quantityInput <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Invalid quantity.");
            return;
        }

        saleId++; //Increment the sale ID


        //Create Sale Item with what is needed
        SaleItem saleItem = new SaleItem(saleId, foundBook.ISBN, quantityInput);

        //Add the SaleItem to the saleitems list
        saleItems.Add(saleItem);

        //Call the method to add the sale item to the database
		SaleItem savedSaleItem = SalesDatabase.AddSaleItem(saleItem);
        

        //Update Saleitems list with database saleId
		saleItem.SaleId = savedSaleItem.SaleId;


    }
}
    

   


	
        


  
