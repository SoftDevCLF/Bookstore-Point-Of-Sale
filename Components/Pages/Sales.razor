@page "/sales"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel
@inject NavigationManager Navigation
@inject IJSRuntime JS

<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Sales</li>
    </ol>
</nav>
<hr />
<h1>Sales</h1>
<hr />
<p class="ms-2 text-muted">Welcome to the Sales Page</p>


<h3>Make A Sale</h3>
<!--Find the Customer to sell to-->
<h4>Search for a customer by ID</h4>
<form @onsubmit="SearchCustomer">
    <div>
        <input class="border rounded-1 w-50 ps-3" placeholder="Customer ID (no spaces)" @bind="customerId" />
        <button class="btn btn-primary" type="submit">Search</button>
    </div>
</form>

<div class="col-md-12 border-start border-end border-top align-middle">
    <p class="mt-3 ms-3">Search Results</p>
    <table class="table">
        <thead>
            <tr>
                <th class="text-primary border-secondary">Customer ID</th>
                <th class="text-primary border-secondary">Name</th>
            </tr>
        </thead>
        <tbody>
            @if (foundCustomer != null)
            {
                <tr class="align-middle">
                    <td>@foundCustomer.CustomerId</td>
                    <td>@foundCustomer.FirstName @foundCustomer.LastName</td>
                </tr>
            }
            else if (foundCustomer == null)
            {
                <p>No results found.</p>
            }
        </tbody>
    </table>
</div>
<!--Display available books to purchase-->
<h4>View Available Books To Purchase:</h4>






@code {
    int customerId;
    bool validCustomerId;
    Customer foundCustomer = null;
    bool found = false;

	private List<Book> books = new (); //List to hold available books


    // Method to search for a customer by customer ID
    private async Task SearchCustomer()
    {
        //Validate the customer ID
        if (await ValidateCustomerId()) //If the customer Id is valid
        {
            foundCustomer = SalesDatabase.SearchId(customerId); //Search for the customer
            found = foundCustomer != null; //Check if the customer was found
            if (!found)
            {
                await JSAlert("Customer ID does not exist.");
            }
        }
        customerId = 0; //Reset the customer ID
    }

    // Method to validate the customer ID
    private async Task<bool> ValidateCustomerId()
    {
        //Check if the customer ID is empty
        if (string.IsNullOrEmpty(customerId.ToString()))
        {
            await JSAlert("Customer ID cannot be empty.");
            return false;
        }
        //Check if the customer ID is a number
        if (!int.TryParse(customerId.ToString(), out _))
        {
            await JSAlert("Customer ID must be a number.");
            return false;
        }
        //Check if the customer ID is less than 0
        if (customerId < 0)
        {
            await JSAlert("Customer ID must be greater than 0.");
            return false;
        }

        return true; //Return true if the customer ID is valid
    }

    // Method to fetch books from the database
    public async Task FetchBooks()
    {
        books = SalesDatabase.DisplayBooks(); // Fetch the books
        if (books == null || books.Count == 0)
        {
            await JSAlert("No available books found."); // Notify if no books
        }
    }



	// Method to display an alert using JavaScript
    private async Task JSAlert(string message) //Async method to display an alert
    {
        await JS.InvokeVoidAsync("alert", message);
    }


}
