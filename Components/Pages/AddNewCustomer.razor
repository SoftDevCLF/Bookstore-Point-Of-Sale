@page "/addNewCustomer"
@using BookstorePointOfSale.DataViewModel
@using BookstorePointOfSale.DataModel
@using BookstorePointOfSale.Services
@using BookstorePointOfSale.Exceptions
@inject NavigationService NavService
@inject ValidationService Validator
@inject AlertService alertService
<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="bg-secondary bg-opacity-10 rounded-3">
    <ol class="breadcrumb align-content-center ps-3 pt-1 pb-1">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/customerManagement">Customer Management</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add New Customer</li>
    </ol>
</nav>
<!--Header-->
<hr/>
<h1>Add New Customer</h1>
<hr/>
<div class="container">
    <div class="row">
        <div class="col-6">
            <div class="fw-lighter mb-2">
                <i class="text-danger">*</i> <i>Required</i>
            </div>
            <!-- Form Section -->
            <form @onsubmit="@(async e => await AddCustomerToDatabase())">
                <div class="mb-3">
                    <label for="firstname" class="form-label">First Name<i class="text-danger">*</i></label>
                    <div >
                        <input @bind="firstName" class="form-control" id="firstname"/>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="lastname" class="form-label">Last Name<i class="text-danger">*</i></label>
                    <div>
                        <input @bind="lastName" class="form-control" id="lastname" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email<i class="text-danger">*</i></label>
                    <div>
                        <input @bind="email" type="email" class="form-control"  id="email"/>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="phonenumber" class="form-label">Phone Number<i class="text-danger">*</i></label>
                    <div>
                        <input @bind="phoneNumber" type="tel" class="form-control"  id="phonenumber" />
                    </div>
                </div>

                <div>
                    <button class="btn btn-primary mb-3 me-3 mt-3 align-middle" type="submit">Add Customer</button>
                    <button class="btn btn-danger" type="button" @onclick="NavService.GoToCustomerManagementPage">Cancel</button>
                </div>
            </form>

        </div>

        <!--Customer Info Section -->
        <div class="col-6  ">
            <!--If newCustomer is true, show customer info-->
            @if (newCustomer)
            {
                <h4>New Customer Overview</h4>
                <div class="bg-secondary bg-gradient bg-opacity-10 rounded-3 p-3 img-thumbnail">
                    <div>
                        <img class="m1 img-fluid rounded-3 " src="books.jpg" alt="Books Image" height="100" />
                    </div>
                    <div class="fw-bold p-3">
                        @customer.FirstName @customer.LastName
                    </div>
                    <div class="p-3">
                        <div class="text-muted">Email</div>
                        @customer.Email
                    </div>
                    <div class="p-3">
                        <div class="text-muted">Phone Number</div>
                        @customer.PhoneNumber
                    </div>
                </div>

                <div class="mt-2 mb-2">
                    <button class="btn btn-success mt-6" @onclick="NavService.GoToCustomerManagementPage" >Go to Customer Page</button>
                    <button class="btn btn-success mt-6" @* @onclick="GoToCustomerPage" *@>Start a Sale</button>
                </div>
            }
        </div>

    </div>
</div>

@code {
    //Declaring variables
    private string firstName; 
    private string lastName;
    private string email;
    private string phoneNumber;
    private Customer customer;
    private int customerId;
    private bool newCustomer = false;

    /// <summary>
    /// Adds a new customer to the database
    /// </summary>
    public async Task AddCustomerToDatabase()
    {
        try
        {
            // Check if the form is valid
            if (!await Validator.ValidateName(firstName, lastName) || !await Validator.ValidatePhoneNumber(phoneNumber))
            {
                return;
            }

            // Validate the email using the Validator
            Validator.ValidateEmail(email);  // This will throw an InvalidEmailException if the email is invalid

            // If validation passed, create a new customer
            customer = new Customer(firstName, lastName, email, phoneNumber);
            // Add the customer to the database
            customer = CustomerDatabase.AddCustomer(customer);
            // Set new customer to true
            newCustomer = true;
        }
        catch (InvalidEmailException ex)
        {
            // Handle invalid email
            await alertService.JSAlert($"Error: {ex.Message}");  
        }
        catch (Exception ex)
        {
            // Handle any other unexpected exceptions
            await alertService.JSAlert($"Unexpected error: {ex.Message}");  
        }
    }


}
